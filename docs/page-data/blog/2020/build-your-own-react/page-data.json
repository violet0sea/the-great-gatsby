{"componentChunkName":"component---src-templates-blog-js","path":"/blog/2020/build-your-own-react","result":{"data":{"markdownRemark":{"html":"<p>原文：<a href=\"pomb.us/build-your-own-react\">Build your own React</a>\n翻译：</p>\n<h2>构建你自己的React</h2>\n<pre><code>我们打算从头开始，一步步地重写一个“React”。完全仿照真实的React的架构，但是不会包含所有的优化操作和非必要的特性。\n如果你阅读过我之前写的《构建你自己的React》系列的文章，这一篇与之前相比的区别的是它使用的React版本是16.8，因此我们可以使用Hooks 并且舍弃所有与class 相关的代码。\n从头开始，下面这些是我们自己版本React 里的所有特性，我们将一个个的添加：\n* Step 1: ** createElement ** 函数\n* Step 2: ** render ** 函数\n* Step 3: ** Concurrent Mode **\n* Step 4: ** Fibers **\n* Step 5: ** Render and Commit Phase **\n* Step 6: ** Reconciliation **\n* Step 7: ** Function Component **\n* Step 8: ** Hooks **\n</code></pre>\n<h3>前言： 回顾</h3>\n<pre><code>首先让我们来回顾一下React里的基本概念。如果你已经掌握React、JSX以及DOM元算的工作原理，可以直接跳过这部分。\n我们将使用一个三行代码的React应用。第一行定义了一个React Element，第二行从DOM树里获取了一个node节点，最后一行把React Element渲染到node节点容器里。\n```\nconst element = &#x3C;h1 title=\"foo\">React Mini&#x3C;/h1>;\nconst container = document.querySelector(\"#root\");\nReactDOM.render(element, container);\n```\n\n让我们删除所有的与 React 相关的代码，并且将其替换成原生的Javascript。\n\n首先是第一行，用JSX定义的一个元素。这不是一个原生的Javascript写法，所以我们先要把这一行替换成原生的Javascript。JSX语法是使用类似Babel一样的工具转化成原生Javascript的。转化方式很简单：使用createElement函数替换标签里的代码，传入tag name，props 以及 children作为参数。\n```\nconst element = React.createElement(\n    \"h1\",\n    {title: \"foo\"},\n    \"React Mini\",\n);\nconst container = document.querySelector(\"#root\");\nReactDOM.render(element, container);\n```\n\nReact.createElement通过传入的参数创建了一个对象。除了一些校验，内部原理就是这样简单。所以我们可以使用他得输出来替换函数调用。\n\n```\nconst element = {\n    type: \"h1\",\n    props: {\n        title: \"foo\",\n        children: \"React Mini\",\n    },\n};\nconst container = document.querySelector(\"#root\");\nReactDOM.render(element, container);\n```\n这就是元素真实的样子，一个对象包含两个属性：type 和 props 。（虽然它还有更多属性，但是我们只关心这两个）\ntype属性是一个字符串，它表明了我们创建DOM节点的类型，它的值是一个标签名，和你使用document.createElement创建HTML元素市传入的标签名一样。它可以是一个函数，但是这会在Step 7里讲到。\nprops 是一个对象，它包含所有的JSX里的属性，同时它也有一个特殊的属性：children。\n在这个例子里，children 是一个字符串，但是通常它会是一个包含更多元素的数组，这也就是为什么元素会构成树的原因。\n接下来将要替换的是ReactDOM.render 这一段代码，render函数是React更新DOM树的关键所在，所以我们会替换成自己更新。\n首先我们会创建一个node使用elemet对象的type字段，在这个例子里是\"h1\"，然后将element.props属性设置到元素上，只有一个title属性\n** 为了避免引起误解，我们将会使用\"element\"来代表React element，\"node\"来代表DOM element。**\n\n然后我们为children属性创建node，只有一个字符串，所以创建一个text node\n使用textNode属性而不是innerText属性是为了在这之后统一对待所以元素，注意到我们也为h1设置了title属性就像我们设置了nodeValue属性一样，这几乎和child string拥有porps:{nodeValue: \"React Mini\"}一摸一样。最后，我们把textNode节点插入h1，h1插入container容器。\n\n```\nconst element = {\n    type: \"h1\",\n    props: {\n        title: \"foo\",\n        children: \"React Mini\",\n    },\n};\nconst container = document.querySelector(\"#root\");\n\nconst node = document.createElement(element.type);\nnode[\"title\"] = element.props.title;\n\nconst text = document.createTextNode(\"\");\ntext[\"nodeValue\"] = element.props.children;\n\nnode.appendChild(text);\ncontainer.appendChild(node);\n```\n到此为止，我们拥有了一个一摸一样的APP，但是它并没有使用React。\n</code></pre>\n<h3>Step 1: createElement函数</h3>\n<pre><code>让我们再次开启另一个项目。这一次我们将要替换React代码为我们自己的React版本。我们首先会重写一个属于自己的createElement。让我们把JSX转化成JS，这样我们就能知道createElement 该如何调用。\n```\n// JSX语法\nconst element = (\n    &#x3C;div id=\"foo\">\n        &#x3C;a>bar&#x3C;/a>\n        &#x3C;b />\n    &#x3C;/div>\n);\n// JS语法\nconst _element = React.createElement(\n    \"div\",\n    {id: \"foo\"},\n    React.createElement(\"a\", null, \"bar\"),\n    React.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nReactDOM.render(element, container);\n```\n正如我们在之前所看到的，一个element就是一个对象，包含type和props属性。我们的函数需要做的就是创建这个对象。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children,\n        },\n    };\n}\nconst element = createElement(\n    \"div\",\n    {id: \"foo\"},\n    createElement(\"a\", null, \"bar\"),\n    createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nReactDOM.render(element, container);\n```\n我们在porps上使用spread运算符，在children上使用rest运算符，这样保证了children永远都是一个数组。\n例如：\ncreateElement(\"div\")返回：\n```\n{\n    type: \"div\",\n    props: {\n        children: [],\n    },\n}\n```\ncreateElement(\"div\", null, a)返回：\n```\n{\n    type: \"div\",\n    props: {\n        children: [a],\n    },\n}\n```\ncreateElement(\"div\", null, a, b)返回：\n```\n{\n    type: \"div\",\n    props: {\n        children: [a, b],\n    },\n}\n```\nchildren数组也可以包含基本数据类型，比如字符串和数字。所以我们把一切不是对象类型的包裹在他们自己的element中，为此我们创建了一个特殊的类型：TEXT_ELEMENT。\nReact 并没有包裹基本类型，也没有在不含children 属性时创建一个空的数组；我们这样做是为了简化我们的代码，因为我们的代码库更加考虑简单而不是性能。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nconst Didact = {\n    createElement,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nReactDOM.render(element, container);\n```\n我们仍然会使用React 的createElement 方法，但是为了区别，我们为自己的库取了一个新的名字。我们需要一个和React 很相似的名称，但是同时也能显示出学习性的目的。\n我们叫它Didact。但是我们也想使用JSX，我们应该怎么做才能让Babel 知道使用的是Didact 的createElement 而不是React 的createElement。\n我们可以想下面这样做，写一个注释，当Babel编译JSX 时会使用我们定义的方法\n```\n/** @jsx Didact.createElement */\nconst element = (\n    &#x3C;div id=\"foo\">\n        &#x3C;a>bar&#x3C;/a>\n        &#x3C;b />\n    &#x3C;/div>\n);\n```\n\n### Step 2: render 函数\n接下来，我们将实现自己版本的ReactDOM.render 方法。\n目前为止，我们只关心DOM树的插入，在之后的部分会处理更新和删除操作。然后对每一个child使用相同的递归操作；同时我们也要处理text elements，如果一个element 的类型是TEXT_ELEMENT，我们创建一个text node节点而不是普通的节点。最后一件事情是将所有的props属性赋值到node 节点。\n\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction render(element, container) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nconst Didact = {\n    createElement,\n    render,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\n// result of element\nconst _element = {\n    type: 'div',\n    props: {\n        id: 'foo',\n        children: [\n            {\n                type: 'a',\n                props: {\n                    children: [\n                        {\n                            type: 'TEXT_ELEMENT',\n                            props: {\n                                nodeValue: 'bar',\n                                children: [],\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                type: 'b',\n                props: {\n                    children: [],\n                }\n            }\n        ]\n    }\n}\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n至此，我们已经有了一个库可以将JSX 插入到DOM里。\n\n### Step 3: Concurrent Mode\n在我们添加更多的代码之前我们需要重构，因为这里的递归调用存在一个问题：一旦我们开始渲染，渲染逻辑会一直执行直到dom 树创建完成。如果dom树很大，会造成主线程被长时间占用。如果浏览器需要做高优先级的事务，比如处理用户的输入或者保持动画的流畅，这个时候会一直等待直到渲染完成。\n所以我们将要把任务分解为小的单元，每次完成一个单元后我们允许浏览器中断渲染过程去做那些优先级较高的事务\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction render(element, container) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nlet nextUnitOfWork = null;\n\nfunction worlLoop(deadline) {\n    let shouldYield = false;\n    while(nextUnitOfWork &#x26;&#x26; !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        shouldYield = deadline.timeRemaining() &#x3C; 1;\n    }\n    requestIdleCallback();\n}\n\nrequestIdleCallback(workLoop);\n\nfunction performUnitOfWork(nextUnitOfWork) {\n    // TODO\n}\n\nconst Didact = {\n    createElement,\n    render,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n我们使用了requestIdleCallback 方法开启循环，你可以把它看作是setTimeout，和setTimeout不同的是，你不用告诉它什么时间开始执行，浏览器会在主线程空闲的时候开始。\n现在React 不再使用requestIdleCallback 方法，而是使用Scheduler包，在这里他们在概念上是一样的。\nrequestIdleCallback 也提供了一个deadline参数，我们可以知道还有多少时间剩余直到浏览器需要掌管线程。\n直到2019年11月，Concurrent Mode仍然不是稳定的功能，相对稳定版本的循环看起来是这个样子的：\n```\nwhile (nextUnitOfWork) {\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n}\n```\n为了使用循环我们需要\n设置第一次的任务单元，需要定义一个performUnitOfWork函数，这个函数不仅执行任务，而且还会返回下一个任务单元。\n\n### Step 4: Fibers\n为了组织每一个任务单元，我们需要一个数据结构： 一个fiber树。\n每一个element元素都会对应一个fiber，每一个fiber都是一个任务单元。\n下面举一个例子：\n假设现在需要渲染一个element 树：\n```\nDidact.render(\n    &#x3C;div>\n        &#x3C;h1>\n            &#x3C;p />\n            &#x3C;a />\n        &#x3C;/h1>\n        &#x3C;h2 />\n    &#x3C;/div>,\n    container\n)\n```\n在render方法里，创建了一个root fiber并且设置它为nextUnitOfWork，其余的任务都会在performUnitOfWork 函数里触发，在这里我们会对每一个fiber做以下三件事：\n1. 将element添加到dom中\n2. 给element的children创建fibers\n3. 设置下一个任务单元\n这种数据结构的其中的一种好处是可以很容易的找到下一个任务单元。这就是为什么每一个fiber都有指向第一个child节点、兄弟节点、父节点的指针。\n当我们完成了fiber的任务单元，如果它有一个child，那么该child的fiber就是下一个任务单元。\n在我们的例子里，当我们完成了div fiber上的任务，那么下一个任务单元将是h1的fiber。\n如果fiber不存在child，那么我们使用兄弟节点作为下一个任务单元。\n例如，p节点的fiber不存在child，那么使用a节点的fiber；如果当前节点的fiber不存在child和兄弟节点，那么我们寻找它的“uncle”节点：父节点的兄弟节点，比如a节点和h2节点。\n同样的，如果父节点不存在兄弟节点，那么我们继续向上寻找各级的父节点直到找到兄弟节点或者是找到root节点。如果找到的是root节点，那么这意味着render函数的工作完成了。\n接下来，让我们把上面的逻辑放入代码里：\n首先，移除render函数里的代码，并把这部分代码放入到createDom函数里，这个函数会在后面使用；在render函数里，我们设置nextUnitOfWork为fiber 树的root节点;\n然后，浏览器准备好了以后，它会执行workLoop函数，渲染工作姐这样从root节点开始执行了。\n在performUnitOfWork里，首先创建一个新的节点，并把它插入到dom树，我们可以通过fiber.dom属性来跟踪DOM节点；然后为每一个child，我们创建一个新的fiber，然后把它添加到fiber树里作为child或者sibling，这取决于它是否是第一个元素；最后，我们寻找下一个任务单元，首先尝试寻找child，接下里寻找sibling，再之后才是uncle，以此类推。这就是performUnitOfWork所做的事情。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction createDom(fiber) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nfunction render(element, container) {\n    nextUnitOfWork = {\n        dom: container,\n        props: {\n            children: [element],\n        },\n    };\n}\n\nlet nextUnitOfWork = null;\n\nfunction worlLoop(deadline) {\n    let shouldYield = false;\n    while(nextUnitOfWork &#x26;&#x26; !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        shouldYield = deadline.timeRemaining() &#x3C; 1;\n    }\n    requestIdleCallback();\n}\n\nrequestIdleCallback(workLoop);\n\nfunction performUnitOfWork(nextUnitOfWork) {\n    // add dom node\n    if (!fiber.dom) {\n        fiber.dom = createDom(fiber);\n    }\n    if (fiber.parent) {\n        fiber.parent.dom.appendChild(fiber.dom);\n    }\n\n    // create new fibers\n    const elements = fiber.props.children;\n    let index = 0;\n    let prevSibling = null;\n\n    while(index &#x3C; elements.length) {\n        const element = elements[i];\n        const newFiber = {\n            type: element.type,\n            props: element.props,\n            parent: fiber,\n            dom: null,\n        };\n\n        if(index === 0) {\n            fiber.child = newFiber;\n        } else {\n            prevSibling.sibling = newFiber;\n        }\n\n        prevSibling = newFiber;\n        index++;\n    }\n\n    // return nextUnitOfWork\n    if(fiber.child) {\n        return fiber.child;\n    }\n\n    let nextFiber = fiber;\n    while(nextFiber) {\n        if(nextFiber.sibling) {\n            return nextFiber.sibling;\n        }\n        nextFiber = nextFiber.parent;\n    }\n}\n\nconst Didact = {\n    createElement,\n    render,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n\n### Step 5: Render and Commit Phases\n上面的代码存在一个问题，当一个element工作时我们添加一个新的节点到DOM树上。在这期间，浏览器可以在在我们渲染完整个树之前打断我们的任务。这个时候，用户会看到一个不完整的UI，这并不是我们所希望的结果。因此，我们需要移除performUnitOfWork函数里改变DOM的那部分代码。相应的，我们需要追踪root节点的fiber，我们把它称作\"work in progress\"或者简称wipRoot。一旦所有的任务完成（当没有下一个任务单元时我们就直到任务完成了），我们提交整个的fiber树到DOM节点。提交工作会在commitRoot函数里执行，在这个函数里递归的将所有的nodes插入到dom。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction createDom(fiber) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nfunction commitRoot() {\n    // add nodes to dom\n    commitWork(wipRoot.child);\n    wipRoot = null;\n}\n\nfunction commitWork(fiber) {\n    if(!fiber) {\n        return;\n    }\n    const domParent = fiber.parent.dom;\n    domParent.appendChild(fiber.dom);\n    commit(fiber.child);\n    commit(fiber.sibling);\n}\n\nfunction render(element, container) {\n    wipRoot = {\n        dom: container,\n        props: {\n            children: [element],\n        },\n    };\n    nextUnitOfWork = wipRoot;\n}\n\nlet nextUnitOfWork = null;\nlet wipRoot = null;\n\nfunction worlLoop(deadline) {\n    let shouldYield = false;\n    while(nextUnitOfWork &#x26;&#x26; !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        shouldYield = deadline.timeRemaining() &#x3C; 1;\n    }\n    if(!nextUnitOfWork &#x26;&#x26; wipRoot) {\n        commitRoot();\n    }\n    requestIdleCallback();\n}\n\nrequestIdleCallback(workLoop);\n\nfunction performUnitOfWork(nextUnitOfWork) {\n    // add dom node\n    if (!fiber.dom) {\n        fiber.dom = createDom(fiber);\n    }\n\n\n    // create new fibers\n    const elements = fiber.props.children;\n    let index = 0;\n    let prevSibling = null;\n\n    while(index &#x3C; elements.length) {\n        const element = elements[i];\n        const newFiber = {\n            type: element.type,\n            props: element.props,\n            parent: fiber,\n            dom: null,\n        };\n\n        if(index === 0) {\n            fiber.child = newFiber;\n        } else {\n            prevSibling.sibling = newFiber;\n        }\n\n        prevSibling = newFiber;\n        index++;\n    }\n\n    // return nextUnitOfWork\n    if(fiber.child) {\n        return fiber.child;\n    }\n\n    let nextFiber = fiber;\n    while(nextFiber) {\n        if(nextFiber.sibling) {\n            return nextFiber.sibling;\n        }\n        nextFiber = nextFiber.parent;\n    }\n}\n\nconst Didact = {\n    createElement,\n    render,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n### Step 6: Reconciliation\n到目前为止，我们仅仅添加节点到dom，但是更新和删除操作该如何？接下来就将揭晓这些，我们需要对上一次提交到dom节点的fiber树和当前render函数里生成的fiber树进行比较。所以我们需要将“上一词提交到DOM的fiber树”存储起来，我们将其称作currentRoot。同时我们也需要为每一个fiber添加一个alternate属性，这个属性会链接到旧的fiber（上一个提交的fiber）。那么就开始从performUnitOfWork里提取代码来创建新的fibers，增加一个新的reconcileChildren函数。\n接下来就是如何reconcile 旧的fibers和新的elements：\n同时递归旧的fiber的children和将要reconcile的elements，如果忽略遍历一个数组和一个链表之间的样板代码，那么剩下的便是最重要的：oldFiber和element。element是我们想要插入到DOM重的，oldFiber是上一次渲染的引用。我们需要比较oldFiber和element之间变化来决定是否需要应用到DOM。\n为了比较它们，我们使用type字段：\n* 如果旧的fiber和新的element具有相同的类型，那么可以保留dom节点，仅更新props的变化\n* 如果type字段不一样，并且新的element存在，这意味着需要创建一个新的DOM节点\n* 如果type字段不一样，而且旧的fiber存在，我们需要移除这个节点\n在React里使用了keys，这使得reconciliation更好。举例来说，它可以检测一个数组元素的位置是否发生变化。\n在第一种情况下，旧的fiber和element具有相同的type，我们需要创建一个新的fiber，保留旧fiber的DOM节点，获取element的props属性。同时也需要新加一个effectTag属性，这个属性会在稍后的提交阶段使用；对于第二种情况，我们需要一个新的DOM节点，并且标记了新fiber的effectTag属性为PLACEMENT；对于第三种情况，我们需要删除节点，因为这种情况不会创建新的fiber，所以effectTag属性添加到旧的fiber上面。但是在提交阶段，我们的操作都是在work in progress root上面，这里并不会包含旧的fiber。所以我们需要一个数组来追踪那些需要被移除的节点，在这之后，我们也会使用那个数组提交变更到DOM节点。\n接下来，就是改变commitWork里的代码来处理新的effectTag字段下对应的情况：\n* 如果fiber的effectTag字段值为PLACEMENT，逻辑跟之前一样，把dom元素插入到父fiber的dom节点里；\n* 如果effectTag字段值为DELETION，我们需要移当前的节点\n* 如果effectTag字段值为UPDATE，我们需要根据porps的变化来更新已存在的dom节点；更新操作会在updateDom函数里，通过比较旧的fiber和新的fiber 的props属性，移除不存在的属性，设置新的属性或者更新属性。一种特殊情况是如果prop是事件处理函数，即prop已on开头，我们将会区别对待。若果事件处理函数发生变化，那么直接移除，并增加新的事件函数。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction createDom(fiber) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nconst isEvent = key => key.startWith('on');\nconst isProperty = key => key !== 'children' &#x26;&#x26; !isEvent(key);\nconst isNew = (prev, next) => key => prev[key] !== next[key];\nconst isGone = (prev, next) => key => !(key in next);\nfunction updateDOm(dom, prevProps, nextProps) {\n    // Remove old or changed event listeners\n    Object.keys(prevProps)\n        .filter(isEvent)\n        .filter(key => !(key in nextProps) || isNew(prevProps, nextProps))\n        .forEach(name => {\n            const eventType = name.toLowerCase().subString(2);\n            dom.removeEventListener(eventType, prevProps[name]);\n        });\n    \n    // Remove unexisted old property\n    Object.keys(prevProps)\n        .filter(isProperty)\n        .filter(isGone(prevProps, nextProps))\n        .forEach(name => dom[name] === '');\n    \n    // set new or changed properties\n    Object.keys(nextProps)\n        .filter(isProperty)\n        .filter(isNew(prevProps, nextProps))\n        .forEach(name => dom[name] = nextProps[key]);\n\n    // add event listeners\n    Object.keys(nextProps)\n        .filter(isEvent)\n        .filter(isNew(prevProps, nextProps))\n        .forEach(name => {\n            const eventType = name.toLowerCase().subString(2);\n            dom.addEventListener(eventType, nextProps[name]);\n        }); \n}\n\nfunction commitRoot() {\n    // add nodes to dom\n    deletions.forEach(commitWork)\n    commitWork(wipRoot.child);\n    currentRoot = wipRoot; // update and delete key point\n    wipRoot = null;\n}\n\nfunction commitWork(fiber) {\n    if(!fiber) {\n        return;\n    }\n    const domParent = fiber.parent.dom;\n\n    if (fiber.effectTag === 'PLACEMENT' &#x26;&#x26; fiber.dom !== null) {\n        domParent.appendChild(fiber.dom);\n    } else if (fiber.effectTag === 'DELETION') {\n        domParent.removeChild(fiber.dom);\n    } else if (fiber.effectTag === 'UPDATE') {\n        updateDom(fiber.dom, fiber.alternate.props, fiber.props);\n    }\n    commit(fiber.child);\n    commit(fiber.sibling);\n}\n\nfunction render(element, container) {\n    wipRoot = {\n        dom: container,\n        props: {\n            children: [element],\n        },\n        alternate: currentRoot, // ***\n    };\n    deletions = [];\n    nextUnitOfWork = wipRoot;\n}\n\nlet nextUnitOfWork = null;\nlet currentRoot = null;\nlet wipRoot = null;\nlet deletions = [];\n\nfunction worlLoop(deadline) {\n    let shouldYield = false;\n    while(nextUnitOfWork &#x26;&#x26; !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        shouldYield = deadline.timeRemaining() &#x3C; 1;\n    }\n    if(!nextUnitOfWork &#x26;&#x26; wipRoot) {\n        commitRoot();\n    }\n    requestIdleCallback();\n}\n\nrequestIdleCallback(workLoop);\n\nfunction performUnitOfWork(nextUnitOfWork) {\n    // add dom node\n    if (!fiber.dom) {\n        fiber.dom = createDom(fiber);\n    }\n\n    // create new fibers\n    const elements = fiber.props.children;\n    reconcileChildren(fiber, elements);\n\n    // create new fibers\n    const elements = fiber.props.children;\n    let index = 0;\n    let prevSibling = null;\n\n    while(index &#x3C; elements.length) {\n        const element = elements[i];\n        const newFiber = {\n            type: element.type,\n            props: element.props,\n            parent: fiber,\n            dom: null,\n        };\n\n        if(index === 0) {\n            fiber.child = newFiber;\n        } else {\n            prevSibling.sibling = newFiber;\n        }\n\n        prevSibling = newFiber;\n        index++;\n    }\n\n    // return nextUnitOfWork\n    if(fiber.child) {\n        return fiber.child;\n    }\n\n    let nextFiber = fiber;\n    while(nextFiber) {\n        if(nextFiber.sibling) {\n            return nextFiber.sibling;\n        }\n        nextFiber = nextFiber.parent;\n    }\n}\n\nfunction reconcileChildren(wipFiber, elements) {\n    let index = 0;\n    let oldFiber = wipFiber.alternate &#x26;&#x26; wipFiber.alternate.child\n    let prevSibling = null;\n\n    while(index &#x3C; elements.length || oldFiber !== null) {\n        const element = elements[i];\n        let newFiber = null;\n\n        // compare oldFiber to element\n        const sameType = oldFiber &#x26;&#x26; element &#x26;&#x26; element.type === oldFiber.type;\n        if(sameType) {\n            // update then node\n            newFiber = {\n                type: oldFiber.type,\n                props: element.props,\n                dom: oldFiber.dom,\n                parent: wipFiber,\n                alternate: oldFiber,\n                effectTag: 'UPDATE',\n            };\n        }\n\n        if(element &#x26;&#x26; !sameType) {\n            // add this node\n            newFiber = {\n                type: element.type,\n                props: element.props,\n                dom: null,\n                parent: wipFiber,\n                alternate: null,\n                effectTag: 'PLACEMENT'\n            }\n        }\n\n        if(oldFiber &#x26;&#x26; !sameType) {\n            // delete the oldFiber's node\n            oldFiber.effectTag = 'DELETION';\n            deletions.push(oldFiber);\n        }\n\n        if(oldFIber) {\n            oldFiber = oldFiber.sibling\n        }\n        if(index === 0) {\n            fiber.child = newFiber;\n        } else {\n            prevSibling.sibling = newFiber;\n        }\n\n        prevSibling = newFiber;\n        index++;\n    }\n}\n\nconst Didact = {\n    createElement,\n    render,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n\n### Step 7: Function Component\n接下来的事情是需要支持function component。\n首先需要改变例子，我们使用一个简单的function component，返回一个h1 element。\n```\n/** @jsx Didact.createElement */\nfunction App(props) {\n    return &#x3C;h1>Hi, {props.name}&#x3C;/p>;\n}\n\nconst element = &#x3C;App name=\"foo\" />;\nconst container = document.getElementById(\"root\");\nDidact.render(element, container);\n```\n注意，如果我们将jsx转化为js，它将会变成：\n```\nfunction App(props) {\n    return Didact.createElement(\n        'h1',\n        null,\n        'Hi ',\n        props.name,\n    );\n}\n\nconst element = Didact.createElement(App, {name: 'foo'});\n```\nFunction Component 存在两点区别：\n1. function component生成的fiber没有DOM节点\n2. children是运行函数产生的，而不是直接从props获取的\n我们需要检测fiber的类型是不是函数，它将决定是否需要使用一个不同的更新函数\n在updateHostComponent里，我们做的工作和以前一样\n在updateFunctionComponent里，我们需要运行函数来得到children，在我们的例子里，fiber.type对应App函数，当我们运行这个函数后，返回了h1 element。我们获取到children后，reconciliatiion工作和以前一样，我们不需要改变任何代码。\n我们需要在commitWork函数里改变一些逻辑，有一些fiber没有dom属性所以我们需要改变两个地方：\n首先，需要找到一个有DOM节点的祖先fiber，我们需要向上遍历fiber树直到找到一个拥有dom节点的fiber；\n其次，当我们删除一个节点时，我们需要向下遍历直到找到那个有dom 节点的child。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction createDom(fiber) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nconst isEvent = key => key.startWith('on');\nconst isProperty = key => key !== 'children' &#x26;&#x26; !isEvent(key);\nconst isNew = (prev, next) => key => prev[key] !== next[key];\nconst isGone = (prev, next) => key => !(key in next);\nfunction updateDom(dom, prevProps, nextProps) {\n    // Remove old or changed event listeners\n    Object.keys(prevProps)\n        .filter(isEvent)\n        .filter(key => !(key in nextProps) || isNew(prevProps, nextProps))\n        .forEach(name => {\n            const eventType = name.toLowerCase().subString(2);\n            dom.removeEventListener(eventType, prevProps[name]);\n        });\n    \n    // Remove unexisted old property\n    Object.keys(prevProps)\n        .filter(isProperty)\n        .filter(isGone(prevProps, nextProps))\n        .forEach(name => dom[name] === '');\n    \n    // set new or changed properties\n    Object.keys(nextProps)\n        .filter(isProperty)\n        .filter(isNew(prevProps, nextProps))\n        .forEach(name => dom[name] = nextProps[key]);\n\n    // add event listeners\n    Object.keys(nextProps)\n        .filter(isEvent)\n        .filter(isNew(prevProps, nextProps))\n        .forEach(name => {\n            const eventType = name.toLowerCase().subString(2);\n            dom.addEventListener(eventType, nextProps[name]);\n        }); \n}\n\nfunction commitRoot() {\n    // add nodes to dom\n    deletions.forEach(commitWork)\n    commitWork(wipRoot.child);\n    currentRoot = wipRoot; // update and delete key point\n    wipRoot = null;\n}\n\nfunction commitWork(fiber) {\n    if(!fiber) {\n        return;\n    }\n\n    let domParentFiber = fiber.parent;\n    while(!domParentFiber.dom) {\n        domParentFiber = domParentFiber.parent;\n    }\n    const domParent = domParentFiber.dom;\n\n    if (fiber.effectTag === 'PLACEMENT' &#x26;&#x26; fiber.dom !== null) {\n        domParent.appendChild(fiber.dom);\n    } else if (fiber.effectTag === 'DELETION') {\n       // domParent.removeChild(fiber.dom);\n       commitDeletion(fiber, domParent);\n    } else if (fiber.effectTag === 'UPDATE') {\n        updateDom(fiber.dom, fiber.alternate.props, fiber.props);\n    }\n    commit(fiber.child);\n    commit(fiber.sibling);\n}\n\nfunction commitDeletion(fiber, domParent) {\n    if(fiber.dom) {\n        domParent.removeChild(fiber.dom);\n    } else {\n        commitDeletion(fiber.child, domParent);\n    }\n}\n\nfunction render(element, container) {\n    wipRoot = {\n        dom: container,\n        props: {\n            children: [element],\n        },\n        alternate: currentRoot, // ***\n    };\n    deletions = [];\n    nextUnitOfWork = wipRoot;\n}\n\nlet nextUnitOfWork = null;\nlet currentRoot = null;\nlet wipRoot = null;\nlet deletions = [];\n\nfunction worlLoop(deadline) {\n    let shouldYield = false;\n    while(nextUnitOfWork &#x26;&#x26; !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        shouldYield = deadline.timeRemaining() &#x3C; 1;\n    }\n    if(!nextUnitOfWork &#x26;&#x26; wipRoot) {\n        commitRoot();\n    }\n    requestIdleCallback();\n}\n\nrequestIdleCallback(workLoop);\n\nfunction updatefunctionComponent(fiber) {\n    const children = [fiber.type(fiber.props)];\n    reconcileChildren(fiber, children);\n}\n\nfunction updateHostComponent(fiber) {\n    // add dom node\n    if (!fiber.dom) {\n        fiber.dom = createDom(fiber);\n    }\n    // create new fibers\n    const elements = fiber.props.children;\n    reconcileChildren(fiber, elements);\n}\n\nfunction performUnitOfWork(nextUnitOfWork) {\n    // distinct function or class\n    const isFunctionComponent = fiber.type instanceof Function;\n    if(isFunctionComponent) {\n        updateFunctionComponent(fiber);\n    } else {\n        updateHostComponent(fiber);\n    }\n\n    // return nextUnitOfWork\n    if(fiber.child) {\n        return fiber.child;\n    }\n\n    let nextFiber = fiber;\n    while(nextFiber) {\n        if(nextFiber.sibling) {\n            return nextFiber.sibling;\n        }\n        nextFiber = nextFiber.parent;\n    }\n}\n\nfunction reconcileChildren(wipFiber, elements) {\n    let index = 0;\n    let oldFiber = wipFiber.alternate &#x26;&#x26; wipFiber.alternate.child\n    let prevSibling = null;\n\n    while(index &#x3C; elements.length || oldFiber !== null) {\n        const element = elements[i];\n        let newFiber = null;\n\n        // compare oldFiber to element\n        const sameType = oldFiber &#x26;&#x26; element &#x26;&#x26; element.type === oldFiber.type;\n        if(sameType) {\n            // update then node\n            newFiber = {\n                type: oldFiber.type,\n                props: element.props,\n                dom: oldFiber.dom,\n                parent: wipFiber,\n                alternate: oldFiber,\n                effectTag: 'UPDATE',\n            };\n        }\n\n        if(element &#x26;&#x26; !sameType) {\n            // add this node\n            newFiber = {\n                type: element.type,\n                props: element.props,\n                dom: null,\n                parent: wipFiber,\n                alternate: null,\n                effectTag: 'PLACEMENT'\n            }\n        }\n\n        if(oldFiber &#x26;&#x26; !sameType) {\n            // delete the oldFiber's node\n            oldFiber.effectTag = 'DELETION';\n            deletions.push(oldFiber);\n        }\n\n        if(oldFIber) {\n            oldFiber = oldFiber.sibling\n        }\n        if(index === 0) {\n            fiber.child = newFiber;\n        } else {\n            prevSibling.sibling = newFiber;\n        }\n\n        prevSibling = newFiber;\n        index++;\n    }\n}\n\nconst Didact = {\n    createElement,\n    render,\n};\n\n\nconst element = Didact.createElement(\n    \"div\",\n    {id: \"foo\"},\n    Didact.createElement(\"a\", null, \"bar\"),\n    Didact.createElement(\"b\"),\n);\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n\n### Step VII: Hooks\n最后一步，让我们给function component增加状态管理。\n让我们把例子改成经典的计数器组件：每一次我们点击它，计数器加1。注意到我们使用Didact.useState来获取和更新计数器的值。\n在Counter函数里我们调用了setState。在调用function component之前，首先需要定义一些全局变量，这些变量会在useState函数里使用。首先，我们需要设置work in progress fiber，同时也需要增加一个hooks数组到上面，这样就可以支持我们在一个组件里多次调用useState函数，此外，我们追踪当前hook的索引。当函数组件调用useState时，我们检查是否存在一个旧的hook，通过检查fiber.alternative.hooks里面是否存在hookIndex对应的值。如果存在旧的hook，并且不是初始化操作，我们从旧的hook里拷贝一份state到新的hook。然后我们把新的hook放入fiber.hooks数组里，将hookIndex的值加1，并返回state。useState同时也需要返回一个函数来更新state，我们定义一个setState函数来接受一个action（在Counter的例子里action是一个函数，这个函数会将state的值加1）。我们把action放入到hook.queue里。然后我们需要做一些类似render函数里的工作，设置一个新的wipRoot作为下一次的任务单元，这样我们就可以让workLoop函数开启一个新的render阶段。但是我们没有执行action函数。我们会在下一次渲染组件时执行，我们从旧的hook.queue里获取所有的actions，然后一个个执行，将state更新，所以我们最终返回了最新的state。\n```\nfunction createElement(type, props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(child =>\n                typeof child === 'object'\n                    ? child\n                    : createTextElement(child)\n            ),\n        },\n    };\n}\n\nfunction createTextElement(text) {\n    return {\n        type: 'TEXT_ELEMENT',\n        props: {\n            nodeValue: text,\n            children: [],\n        },\n    };\n}\n\nfunction createDom(fiber) {\n    // create dom nodes\n    const dom = \n        element.type === 'TEXT_ELEMENT';\n        ? document.createTextNode('')\n        : document.createElement(element.type);\n    const isProperty = key => key !== 'children';\n    Object.keys(element.props)\n        .filter(isProperty)\n        .forEach(name => dom[name] === element.props[name]);\n    // 递归children属性创建element\n    element.props.children.forEach(child => render(child, dom));\n    container.appendChild(dom);\n}\n\nconst isEvent = key => key.startWith('on');\nconst isProperty = key => key !== 'children' &#x26;&#x26; !isEvent(key);\nconst isNew = (prev, next) => key => prev[key] !== next[key];\nconst isGone = (prev, next) => key => !(key in next);\nfunction updateDom(dom, prevProps, nextProps) {\n    // Remove old or changed event listeners\n    Object.keys(prevProps)\n        .filter(isEvent)\n        .filter(key => !(key in nextProps) || isNew(prevProps, nextProps))\n        .forEach(name => {\n            const eventType = name.toLowerCase().subString(2);\n            dom.removeEventListener(eventType, prevProps[name]);\n        });\n    \n    // Remove unexisted old property\n    Object.keys(prevProps)\n        .filter(isProperty)\n        .filter(isGone(prevProps, nextProps))\n        .forEach(name => dom[name] === '');\n    \n    // set new or changed properties\n    Object.keys(nextProps)\n        .filter(isProperty)\n        .filter(isNew(prevProps, nextProps))\n        .forEach(name => dom[name] = nextProps[key]);\n\n    // add event listeners\n    Object.keys(nextProps)\n        .filter(isEvent)\n        .filter(isNew(prevProps, nextProps))\n        .forEach(name => {\n            const eventType = name.toLowerCase().subString(2);\n            dom.addEventListener(eventType, nextProps[name]);\n        }); \n}\n\nfunction commitRoot() {\n    // add nodes to dom\n    deletions.forEach(commitWork)\n    commitWork(wipRoot.child);\n    currentRoot = wipRoot; // update and delete key point\n    wipRoot = null;\n}\n\nfunction commitWork(fiber) {\n    if(!fiber) {\n        return;\n    }\n\n    let domParentFiber = fiber.parent;\n    while(!domParentFiber.dom) {\n        domParentFiber = domParentFiber.parent;\n    }\n    const domParent = domParentFiber.dom;\n\n    if (fiber.effectTag === 'PLACEMENT' &#x26;&#x26; fiber.dom !== null) {\n        domParent.appendChild(fiber.dom);\n    } else if (fiber.effectTag === 'DELETION') {\n       // domParent.removeChild(fiber.dom);\n       commitDeletion(fiber, domParent);\n    } else if (fiber.effectTag === 'UPDATE') {\n        updateDom(fiber.dom, fiber.alternate.props, fiber.props);\n    }\n    commit(fiber.child);\n    commit(fiber.sibling);\n}\n\nfunction commitDeletion(fiber, domParent) {\n    if(fiber.dom) {\n        domParent.removeChild(fiber.dom);\n    } else {\n        commitDeletion(fiber.child, domParent);\n    }\n}\n\nfunction render(element, container) {\n    wipRoot = {\n        dom: container,\n        props: {\n            children: [element],\n        },\n        alternate: currentRoot, // ***\n    };\n    deletions = [];\n    nextUnitOfWork = wipRoot;\n}\n\nlet nextUnitOfWork = null;\nlet currentRoot = null;\nlet wipRoot = null;\nlet deletions = [];\n\nfunction worlLoop(deadline) {\n    let shouldYield = false;\n    while(nextUnitOfWork &#x26;&#x26; !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n        shouldYield = deadline.timeRemaining() &#x3C; 1;\n    }\n    if(!nextUnitOfWork &#x26;&#x26; wipRoot) {\n        commitRoot();\n    }\n    requestIdleCallback();\n}\n\nrequestIdleCallback(workLoop);\nlet wipFiber = null;\nlet hookIndex = null;\n\nfunction updatefunctionComponent(fiber) {\n    wipFiber = fiber;\n    hookIndex = 0;\n    wipFiber.hooks = [];\n    const children = [fiber.type(fiber.props)];\n    reconcileChildren(fiber, children);\n}\n\nfunction useState(initial) {\n    const oldHook =\n        wipFiber.alternate &#x26;&#x26;\n        wipFiber.alternate.hooks &#x26;&#x26;\n        wipFiber.alternative.hooks[hookIndex];\n    const hook = {\n        state: oldHook ? oldHook.state : initial,\n        queue: [],\n    };\n\n    const actions = oldHook ? oldHook.queue : [];\n    actions.forEach(action => hook.state = action(hook.state));\n\n    const setState = action => {\n        hook.queue.push(action);\n        wipRoot = {\n            dom: currentRoot.dom,\n            props: currentroot.props,\n            alternate: currentRoot,\n        };\n        nextUnitOfWork = wipRoot;\n        deletions = [];\n    }\n    wipFiber.hooks.push(hook);\n    hookIndex++;\n    return [hook.state, setState];\n}\n\nfunction updateHostComponent(fiber) {\n    // add dom node\n    if (!fiber.dom) {\n        fiber.dom = createDom(fiber);\n    }\n    // create new fibers\n    const elements = fiber.props.children;\n    reconcileChildren(fiber, elements);\n}\n\nfunction performUnitOfWork(nextUnitOfWork) {\n    // distinct function or class\n    const isFunctionComponent = fiber.type instanceof Function;\n    if(isFunctionComponent) {\n        updateFunctionComponent(fiber);\n    } else {\n        updateHostComponent(fiber);\n    }\n\n    // return nextUnitOfWork\n    if(fiber.child) {\n        return fiber.child;\n    }\n\n    let nextFiber = fiber;\n    while(nextFiber) {\n        if(nextFiber.sibling) {\n            return nextFiber.sibling;\n        }\n        nextFiber = nextFiber.parent;\n    }\n}\n\nfunction reconcileChildren(wipFiber, elements) {\n    let index = 0;\n    let oldFiber = wipFiber.alternate &#x26;&#x26; wipFiber.alternate.child\n    let prevSibling = null;\n\n    while(index &#x3C; elements.length || oldFiber !== null) {\n        const element = elements[i];\n        let newFiber = null;\n\n        // compare oldFiber to element\n        const sameType = oldFiber &#x26;&#x26; element &#x26;&#x26; element.type === oldFiber.type;\n        if(sameType) {\n            // update then node\n            newFiber = {\n                type: oldFiber.type,\n                props: element.props,\n                dom: oldFiber.dom,\n                parent: wipFiber,\n                alternate: oldFiber,\n                effectTag: 'UPDATE',\n            };\n        }\n\n        if(element &#x26;&#x26; !sameType) {\n            // add this node\n            newFiber = {\n                type: element.type,\n                props: element.props,\n                dom: null,\n                parent: wipFiber,\n                alternate: null,\n                effectTag: 'PLACEMENT'\n            }\n        }\n\n        if(oldFiber &#x26;&#x26; !sameType) {\n            // delete the oldFiber's node\n            oldFiber.effectTag = 'DELETION';\n            deletions.push(oldFiber);\n        }\n\n        if(oldFIber) {\n            oldFiber = oldFiber.sibling\n        }\n        if(index === 0) {\n            fiber.child = newFiber;\n        } else {\n            prevSibling.sibling = newFiber;\n        }\n\n        prevSibling = newFiber;\n        index++;\n    }\n}\n\nconst Didact = {\n    createElement,\n    render,\n    // add state manage\n    useState,\n};\n\n/** @jsx Didact.createElement */\nfunction Counter() {\n    const [state, setState] = Didact.useState(1);\n    return (\n        &#x3C;h1 onClick={() => setState(c => c + 1)}>\n            Count: {state}\n        &#x3C;/h1>\n    );\n}\nconst element = &#x3C;Counter />;\nconst container = document.querySelector(\"#root\");\nDidact.render(element, container);\n```\n以上就是所有的代码。\n</code></pre>","frontmatter":{"title":"Build your own React"}}},"pageContext":{"slug":"/blog/2020/dayone/"}}}